sprintf("%c is currently enrolled and their study load is %d", L2$Name, L2$Study_Load)
sprintf("%c is currently enrolled and their study load is %d", L3$Name, L3$Study_Load)
sprintf("%c is currently enrolled and their study load is %d", L4$Name, L4$Study_Load)
sprintf("%c is %d", L5$Name, L5$Study_Load)
}
student_report(student_data)
student_report <- function(stu_data) {
stu_data %>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time", "not currently studying")
)
)
)
)
stu_data
}
student_report(student_data)
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time", "not currently studying")
)
)
)
)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time", "not currently studying")
)
)
)
)
stu_data
}
student_report(student_data)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time", "not currently studying")
)
)
)
)
L1 <- stu_data[[1]]
L2 <- stu_data[[2]]
L3 <- stu_data[[3]]
L4 <- stu_data[[4]]
L5 <- stu_data[[5]]
sprintf("%s is currently enrolled and their study load is %d", L1$Name, L1$Study_Load)
sprintf("%s is currently enrolled and their study load is %d", L2$Name, L2$Study_Load)
sprintf("%s is currently enrolled and their study load is %d", L3$Name, L3$Study_Load)
sprintf("%s is currently enrolled and their study load is %d", L4$Name, L4$Study_Load)
sprintf("%s is %d", L5$Name, L5$Study_Load)
}
student_report(student_data)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time", "not currently studying")
)
)
)
)
L1 <- stu_data[[1]]
L2 <- stu_data[[2]]
L3 <- stu_data[[3]]
L4 <- stu_data[[4]]
L5 <- stu_data[[5]]
sprintf("%s is currently enrolled and their study load is %s", L1$Name, L1$Study_Load)
sprintf("%s is currently enrolled and their study load is %s", L2$Name, L2$Study_Load)
sprintf("%s is currently enrolled and their study load is %s", L3$Name, L3$Study_Load)
sprintf("%s is currently enrolled and their study load is %s", L4$Name, L4$Study_Load)
sprintf("%s is %s", L5$Name, L5$Study_Load)
}
student_report(student_data)
student_report(student_data)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time", "not currently studying")
)
)
)
)
stu_data
L1 <- stu_data[[1]]
L2 <- stu_data[[2]]
L3 <- stu_data[[3]]
L4 <- stu_data[[4]]
L5 <- stu_data[[5]]
sprintf("%s is currently enrolled and their study load is %s", L1$Name, L1$Study_Load)
sprintf("%s is currently enrolled and their study load is %s", L2$Name, L2$Study_Load)
sprintf("%s is currently enrolled and their study load is %s", L3$Name, L3$Study_Load)
sprintf("%s is currently enrolled and their study load is %s", L4$Name, L4$Study_Load)
sprintf("%s is %s", L5$Name, L5$Study_Load)
}
student_report(student_data)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time", "not currently studying")
)
)
)
)
stu_data
}
student_report(student_data)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time",
ifelse((`Subjects` == NA), "not currently studying", NA)
)
)
)
)
stu_data
}
student_report(student_data)
q_func <- function(y) {
y_len <- length(y)
if (y_len < 3) {
print("Input is too short")
}
else {
z <- length(y)
new_y <- sort(y)
new_y1 <- c(1, z)
new_y[!new_y %in% new_y1]
return(mean(new_y))
}
}
test_data <- c(5, 1, 2, 4, 3)
q_func(test_data)
5
gm <- dslabs::gapminder
5.1
gm1975 <- gm %>% filter(`year` == 1975)
max(gm1975$life_expectancy)
5.2
gmEA <- gm %>% filter((`continent` == "Europe" | `continent` == "Asia"))
max(gmEA$life_expectancy)
5.3
mean(gm$population[gm$continent == "Europe"], na.rm = TRUE)
mean(gm$population[gm$continent == "Americas"], na.rm = TRUE)
gmE <- gm %>% filter(`continent` == "Europe")
gmE %>% group_by(`country`) %>% summarise(avg = mean(`population`, , na.rm = TRUE))
5.4
gm5_4 <- gm %>% filter((`year` >= 2005 & `year` <= 2010))
n_distinct(gm5_4$country)
5.5
gm_na <- na.omit(gm)
nrow(gm_na)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time",
ifelse((`Subjects` == NA), "not currently studying", NA)
)
)
)
)
stu_data
}
student_report(student_data)
q_func <- function(y) {
y_len <- length(y)
if (y_len < 3) {
print("Input is too short")
}
else {
z <- length(y)
new_y <- sort(y)
new_y1 <- c(1, z)
new_y[!new_y %in% new_y1]
return(mean(new_y))
}
}
test_data <- c(5, 1, 2, 4, 3)
q_func(test_data)
5
gm <- dslabs::gapminder
5.1
gm1975 <- gm %>% filter(`year` == 1975)
max(gm1975$life_expectancy)
5.2
gmEA <- gm %>% filter((`continent` == "Europe" | `continent` == "Asia"))
max(gmEA$life_expectancy)
5.3
mean(gm$population[gm$continent == "Europe"], na.rm = TRUE)
mean(gm$population[gm$continent == "Americas"], na.rm = TRUE)
gmE <- gm %>% filter(`continent` == "Europe")
gmE %>% group_by(`country`) %>% summarise(avg = mean(`population`, , na.rm = TRUE))
5.4
gm5_4 <- gm %>% filter((`year` >= 2005 & `year` <= 2010))
n_distinct(gm5_4$country)
5.5
gm_na <- na.omit(gm)
nrow(gm_na)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time",
ifelse((`Subjects` == NA), "not currently studying", NA)
))
)
)
)
stu_data
}
student_report(student_data)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time",
ifelse((`Subjects` == "NA"), "not currently studying", NA)
))
)
)
)
stu_data
}
student_report(student_data)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time",
ifelse((is.na(`Subjects`)), "not currently studying", NA)
))
)
)
)
stu_data
}
student_report(student_data)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time",
ifelse((is.na(Subjects)), "not currently studying", NA)
))
)
)
)
stu_data
}
student_report(student_data)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse((`Subjects` < 3), "Part Time",
)
)
stu_data
}
student_report <- function(stu_data) {
student_report <- function(stu_data) {
student_report <- function(stu_data) {
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time",
ifelse(`Subjects` == NA), "not currently studying", NA)
)
)
)
)
stu_data
}
student_report(student_data)
q_func <- function(y) {
y_len <- length(y)
if (y_len < 3) {
print("Input is too short")
}
else {
z <- length(y)
new_y <- sort(y)
new_y1 <- c(1, z)
new_y[!new_y %in% new_y1]
return(mean(new_y))
}
}
test_data <- c(5, 1, 2, 4, 3)
student_report(student_data)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time",
ifelse(`Subjects` == NA), "not currently studying", NA)
)
)
)
)
stu_data
}
student_report(student_data)
student_report <- function(stu_data) {
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time",
ifelse((`Subjects` == NA), "not currently studying", NA)
)
)
)
)
)
stu_data
}
student_report(student_data)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse((`Subjects` < 3), "Part Time",
ifelse((`Subjects` == "NA"), "not currently studying", NA)
)
)
)
)
)
stu_data
}
student_report(student_data)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse(((`Subjects` < 3) | (`Subjects` > 0), "Part Time", "not currently studying")
)
)
)
)
)
stu_data
}
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse(((`Subjects` < 3) | (`Subjects` > 0)), "Part Time", "not currently studying")
)
)
)
)
)
stu_data
}
student_report(student_data)
student_report <- function(stu_data) {
stu_data %<>% map(~mutate(., Study_Load = ifelse((`Subjects` > 4), "Overloaded",
ifelse(((`Subjects` == 4) | (`Subjects` == 3)), "Full Time",
ifelse(((`Subjects` < 3) | (`Subjects` > 0)), "Part Time", "not currently studying")
)
)
)
)
stu_data
}
student_report(student_data)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(viridis)
setwd("C:/Users/HP/Desktop/MS/Sem 2 - 1/Data Visualisation/Assignment 3")
setwd("C:/Users/HP/Desktop/MS/Sem 2 - 1/Data Visualisation/Assignment 3")
install.packages("xfun")
setwd("C:/Users/HP/Desktop/MS/Sem 2 - 1/Time Series/Assignment 3")
setwd("C:/Users/HP/Desktop/MS/Sem 2 - 1/Time Series/Assignment 1")
knitr::opts_chunk$set(echo = TRUE)
library(TSA) # Time Series Analysis.
library(tseries) # Time Series Analysis and Computational Finance.[2] - https://cran.r-project.org/web/packages/tseries/index.html
library(fUnitRoots) # To analyze trends and unit roots in financial time series. [3] - https://cran.r-project.org/web/packages/fUnitRoots/index.html
library(dplyr)
v_ozone_thickness <- read.csv("UNRATE.csv", header = TRUE)
head(v_ozone_thickness)
v_ozone_thickness$DATE <- as.Date(v_ozone_thickness$DATE)
rownames(v_ozone_thickness) <- v_ozone_thickness$DATE
v_ozone_thickness <- within(v_ozone_thickness, rm(DATE))
head(v_ozone_thickness)
class(v_ozone_thickness)
v_ozone_thickness_1 <- ts(as.vector(as.matrix(t(v_ozone_thickness))), start = 1948-01-01, end = 2021-04-01)
class(v_ozone_thickness_1)
# Function to plot a single data.
v_Plot <- function(v, m){
plot(v, type = "b", pch = 19, col = "blue", xlab = "years", ylab = "Thickness", main = m)
}
# Function to form a legend corresponding to a single data plot.
v_leg1 <- function(t, l, c, p){
legend("bottomleft", inset = .03, title = t, legend = l, col = c, horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, box.col = "blue", pch = p)
}
v_Plot(v_ozone_thickness_1, "Ozone layer thickness change from 1927 to 2016 in Dobson units")
v_leg1("Ozone layer Thickness change over years.", c("Thickness Change"), c("blue"), c(19))
OTS <- v_ozone_thickness %>% summarise(Min = min(`UNRATE`, na.rm = TRUE),
SD = sd(`UNRATE`, na.rm = TRUE),
Q1 = quantile(`UNRATE`, probs = .25, na.rm = TRUE),
Median = median(`UNRATE`, na.rm = TRUE),
Mean = mean(`UNRATE`, na.rm = TRUE),
IQR = IQR(`UNRATE`, na.rm = TRUE),
Q3 = quantile(`UNRATE`, probs = .75,na.rm = TRUE),
Max = Q3 + 1.5 * IQR,
Missing = sum(is.na(`UNRATE`)))
knitr::kable(OTS, caption = "Statistics for Ozone Layer Thickness Data")
# Function to plot using two different data (Scatter Plot).
v_Plot1 <- function(v, v1, x, y, m){
plot(x = v, y = v1, pch = 19, col = "blue", xlab = x, ylab = y, main = m)
}
# Function to form a legend corresponding to a two data plot.
v_leg <- function(t, l){
legend("topleft", inset = .03, title = t, legend = c(l), col = c("blue"), horiz = TRUE, cex = 0.8, box.lty = 2, box.lwd = 2, box.col = "blue", pch = c(19))
}
v_data_lag = zlag(v_ozone_thickness_1) # First lag of Ozone layer thickness series generation.
v_Plot1(v_data_lag, v_ozone_thickness_1, "Thickness change in previous years.", "Thickness change", "Scatter plot for Ozone Layer Thickness in Dobson units.")
v_leg("Ozone layer Thickness change over years.", "Thickness Change.")
i = 2 : length(v_data_lag) # Creating index by negletting first null values.
cor(v_ozone_thickness_1[i], v_data_lag[i]) # Calculating the correltion coefficient.
v_time <- time(v_ozone_thickness_1)
V_LM = lm(v_ozone_thickness_1 ~ v_time)
summary(V_LM)
v_Plot(v_ozone_thickness_1, "Ozone Layer Thickness change in Dobson units - Simple Linear Model")
abline(V_LM, lty = 1, col = "red")
v_leg1("Ozone layer Thickness change over years.", c("Thickness change", "Linear Model"), c("blue", "Red"), c(19, NA))
summary(V_LM)
# Function for residual analysis.
v_analysis <- function(res_m) {
# Scatter plot for model residuals
plot(res_m, type = "b", pch = 19, col = "blue", xlab = "years", ylab = "Standardized Residuals", main = "Plot of Residuals over Time")
abline(h = 0)
# Standard distribution
hist(res_m, xlab = 'Standardized Residuals', freq = FALSE, ylim = c(0, 0.6))
curve(dnorm(x, mean = mean(res_m), sd = sd(res_m)), col = "red", lwd = 2, add = TRUE, yaxt = "n")
# QQplot for model residuals
qqnorm(res_m, col = c("blue"))
qqline(res_m)
# Auto-Correlation Plot
acf(res_m, main = "ACF of Standardized Residuals",col=c("blue"))
}
# Displaying both Mean and Standard deviation of LM.
sprintf("Mean : %f & Standard Deviation : %f", mean(rstudent(V_LM)), sd(rstudent(V_LM)))
v_analysis(rstudent(V_LM))
shapiro.test(rstudent(V_LM))
v_time2 = v_time ^ 2
V_QM = lm(v_ozone_thickness_1 ~ (v_time + v_time2))
plot(ts(fitted(V_QM)), ylim = c(min(c(fitted(V_QM), as.vector(v_ozone_thickness_1))), max(c(fitted(V_QM),as.vector(v_ozone_thickness_1)))), col = "red", xlab = "years", ylab = "Thickness change", main = "Quadratic Curve (Fitted) of Ozone layer Thickness change - Quadratic Model")
lines(as.vector(v_ozone_thickness_1), type = "b", col = "blue", pch = 19)
v_leg1("QuadPlot", c("Time Series Plot", "Quadratic Trend Line"), c("blue", "red"), c(19, NA))
summary(V_QM)
# Displaying both Mean and Standard deviation of QM.
sprintf("Mean : %f & Standard Deviation : %f", mean(rstudent(V_QM)), sd(rstudent(V_QM)))
v_analysis(rstudent(V_QM))
shapiro.test(rstudent(V_QM))
v_seven = ts(v_ozone_thickness_1, frequency = 7)
ts_plot1 = plot(v_seven, type = 'l',
main ="Time series plot of the yearly changes in thickness of Ozone layer",
ylab = "Change in Ozone thickness",
xlab = "7 years cycle", col = "blue")
v_leg1("Ozone layer thickness change - 7 year cycle.", c("Thickness change - 7 years"), c("blue"), c(19))
v_cycle = factor(rep(1 : 7, length.out = length(v_seven)), ordered = TRUE)
points(y = v_seven, x = time(v_seven), pch = as.character(v_cycle), col = 2, cex = 1.15)
h = 5
new = data.frame(v_time = seq((max(v_time) + 1), (max(v_time) + h), 1))
new$v_time2 = new$v_time^2
# Predicting from new data.
v_pred = predict(V_QM, new, interval = "prediction")
# Based on the prediction forming new data table for the next five years.
v_pred_tab = data.frame(Year = seq(2017, 2021, 1), v_pred)
colnames(v_pred_tab) = c("Year", "Prediction", "LowerCI", "UpperCI")
head(v_pred_tab)
#graphing it out
plot(v_ozone_thickness_1, type = 'o',
main ="Next 5 year thickness change prediction using Quadratic model.",
ylab = "Thickness change",
xlab = "Years",
xlim = c(1927, 2021),
ylim = c(-15, 4),
col = c("blue"), pch = c(19))
lines(ts(as.vector(v_pred[, 1]), start = 2017), col = "red", type = "l")
lines(ts(as.vector(v_pred[, 2]), start = 2017), col = "blue", type = "l")
lines(ts(as.vector(v_pred[, 3]), start = 2017), col = "blue", type = "l")
v_leg1("Forecast", c("Data", "Forecast limits", "Forecasts"), c("blue", "blue", "red"), c(NA, NA, NA))
acf(v_ozone_thickness_1, ci.type = 'ma', main = "Thickness change - ACF")
pacf(v_ozone_thickness_1, main = "Thickness change - PACF")
# Lag for ADF test
ar(v_ozone_thickness_1)
adfTest(v_ozone_thickness_1, lags = 4, type = "nc", title = 'No constant nor Time Trend')
adfTest(v_ozone_thickness_1, lags = 4, type = "c", title = 'With Constant but no Time Trend')
adfTest(v_ozone_thickness_1, lags = 4, type = "ct", title = 'With constant and Time Trend')
# Checking for Box_Cox transformation with best lambda
#v_BoxCox <-  BoxCox.ar(v_ozone_thickness_1 + 13)
#title(main = "Log-likelihood vs Lambda values.")
v_diff = diff(v_ozone_thickness_1)
# Plot - First difference.
v_Plot(v_diff, "Differenced data of initial thickness change in Ozone layer.")
v_leg("Differenced thickness change over years.", c("First ever differenced thickness Change"))
ar(v_diff)
#conducting the ADF tests
adfTest(v_diff, lags = 6, type = "nc", title = 'No constant nor Time Trend')
adfTest(v_diff, lags = 6, type = "c", title = 'With Constant but no Time Trend')
adfTest(v_diff, lags = 6, type = "ct", title = 'With constant and Time Trend')
acf(v_diff, main = "Ozone layer thickness first difference data - ACF")
pacf(v_diff, main = "Ozone layer thickness first difference data - PACF")
#calculating the eacf
eacf(v_diff, ar.max = 6, ma.max = 9)
#creating the BIC plot
res = armasubsets(v_diff, nar = 9, nma = 9, y.name = 'ar', ar.method = 'ols')
plot(res)
title(main = "Thickness difference - BIC", line = 6)
h6=hos %>%
filter(`Peer group` == "Medium regional hospitals") %>%
group_by(`Patient cohort`) %>%
summarise(ALOS = round(mean(`Number of patients`),2))
View(v_ozone_thickness)
View(v_ozone_thickness)
